#include <cassert>
#include "NurikabeBot.h"

void test3x3()
{
  int init_state [3][3] = {{0, 0, 2},
                           {0, 0, 0},
                           {1, 0, 1}};
  NurikabeBot<3> nb;
  assert(nb.solve(init_state));
}

void test4x4()
{
  int init_state [4][4] = {{0, 0, 2, 0},
                           {0, 0, 0, 0},
                           {1, 0, 1, 0},
                           {0, 0, 0, 0}};
  NurikabeBot<4> nb;
  assert(nb.solve(init_state));
}

void test5x5()
{
  int init_state [5][5] = {{0, 0, 2, 0, 0},
                           {0, 0, 0, 0, 0},
                           {1, 0, 1, 0, 0},
                           {0, 0, 0, 0, 0},
                           {0, 0, 3, 0, 4}};
  NurikabeBot<5> nb;
  assert(nb.solve(init_state));
}

void test10x10()
{
  int init_state [10][10] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 2, 0, 0, 2},
                             {0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
                             {1, 0, 0, 4, 0, 0, 0, 2, 0, 0},
                             {0, 0, 0, 0, 0, 2, 0, 0, 0, 2},
                             {0, 0, 0, 3, 0, 0, 0, 4, 0, 0},
                             {2, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 2, 0, 0, 0, 2, 0},
                             {3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 4, 0, 1, 0, 2}};
  NurikabeBot<10> nb;
  assert(nb.solve(init_state));
}

void test20x20()
{
  int init_state [20][20] =
          {{1, 0, 2, 0, 1, 0, 11, 0, 2, 0, 4, 0, 0, 0, 1, 0, 3, 0, 2, 0, },
           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
           {1, 0, 0, 2, 0, 0, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, },
           {0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 2, },
           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, },
           {0, 0, 7, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, },
           {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, },
           {0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 3, 0, 2, 0, 0, 0, },
           {0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
           {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, },
           {0, 0, 1, 0, 3, 0, 0, 0, 5, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, },
           {1, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
           {0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 0, },
           {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, },
           {1, 0, 0, 4, 0, 0, 3, 0, 0, 2, 0, 3, 0, 0, 2, 0, 0, 1, 0, 1, },
           {0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, },
           {0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 3, },
           {0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, },
           {2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, },
           {0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, }};

  NurikabeBot<20> nb;
  assert(nb.solve(init_state));
}

int main(int argc, char **argv)
{
  test3x3();
  test4x4();
  test5x5();
  test10x10();
  test20x20();
}
